class Recursion{

    public static void main(String[] args) {
        // Ascending Called
        Asc(3);

        // Descdending Called
        Des(3);

        // Fibonacci Called
        System.out.println("Fibbonacci : " + fib(5));

        // Factorial Called
        System.out.println("Factorial : " + fact(5));

        // Recursion Tree Called
        mRT(4);

        // Indirect Recursion
        inRec1(20);
    }



      // Indirect Recursion 1
    static void inRec1(int num){
      if(0 < num){
          System.out.println("Indirect Recursion : " + num);
          inRec2(num - 1);
      }  
    }

    // Indirect Recursion 2
    static void inRec2(int num){
        if(1 < num){
            System.out.println("Indirect Recursion : " + num);
            int r = num / 2;
            inRec1(r);
        }
    }

    // Ascending 
    static void Asc(int num){
        if(num > 0){
            System.out.println("Ascending : " +num);
            Asc(num - 1);
        }
    }


    // Descending
    static void Des(int num){
        if(num > 0){
            Des(num - 1);
            System.out.println("Descending : " +num);
        }
    }

    // Fibonacci 1 1 2 3 5 8 13 21 34
    static int fib(int num){
        if(num <= 1){
            return 1;
        }
        return fib(num - 1) + fib(num - 2);
    }

    // Factorial 1 * 2 * 3 * 4 * 5 * 6
    static int fact(int num){
        if(num <= 1){
            return 1;
        }
        return fact(num - 1) * num;
    }

    // Recursion Tree
    static void mRT(int num){
        if(num > 0){
            System.out.println("Recursion Tree : " + num);
            mRT(num - 1);
            mRT(num - 1);
        }
    }

}
